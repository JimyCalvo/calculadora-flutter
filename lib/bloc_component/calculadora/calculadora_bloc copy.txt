import 'package:bloc/bloc.dart';
import 'package:meta/meta.dart';

part 'calculadora_event.dart';
part 'calculadora_state.dart';

class CalculadoraBloc extends Bloc<CalculadoraEvent, CalculadoraState> {
  CalculadoraBloc() : super(CalculadoraState()) {
    on<CalculadoraEvent>(
      (event, emit) {
        if (event is ClearC)
          _clearEvent(event, emit);
        else if (event is AddNumero)
          _addNumeroEvent(state, event, emit);
        else if (event is CambioSigno)
          _cambioSignoEvent(state, event, emit);
        else if (event is DeleteUltimo)
          _deleteUltimoEvent(state, event, emit);
        else if (event is OperationBasic)
          _operationBasicEvent(state, event, emit);
        else if (event is ResultadoCalculadora)
          _resultadoCalculadoraEvent(state, event, emit);
      },
    );
  }

  void _clearEvent(ClearC event, Emitter<CalculadoraState> emit) {
    emit(CalculadoraState(
      valor1: '0',
      mathResultado: '0',
      valor2: '',
      operacion: '',
    ));
  }
}

void _resultadoCalculadoraEvent(CalculadoraState state,
    ResultadoCalculadora event, Emitter<CalculadoraState> emit) {
  final double num1 = double.parse(state.valor1);
  final double num2 = double.parse(state.mathResultado);
  
  switch (state.operacion) {
    case '+':
      emit(state.copyWith(
          valor2: state.mathResultado, mathResultado: '${num1 + num2}'));
          break;
    case '-':
      emit(state.copyWith(
          valor2: state.mathResultado, 
          mathResultado: '${num1 - num2}',
          ));

          break;
          
    case 'x':
      emit(state.copyWith(
          valor2: state.mathResultado, mathResultado: '${num1 * num2}'));
    case 'รท':
      emit(state.copyWith(
          valor2: state.mathResultado, mathResultado: '${num1 / num2}'));
      break;

    default:
      emit(CalculadoraState(
        valor1: '0',
        mathResultado: '0',
        valor2: '',
        operacion: '',
      ));
  }
}

void _operationBasicEvent(CalculadoraState state, OperationBasic event,
    Emitter<CalculadoraState> emit) {
  emit(state.copyWith(
      valor1: state.mathResultado,
      mathResultado: '0',
      operacion: event.operation,
      valor2: '0'));
}

void _deleteUltimoEvent(CalculadoraState state, DeleteUltimo event,
    Emitter<CalculadoraState> emit) {
  if (state.mathResultado != '0') {
    if (state.mathResultado == '-0') {
      emit(state.copyWith(mathResultado: '0'));
    } else if (state.mathResultado.endsWith('.0')) {
      emit(state.copyWith(
          mathResultado: state.mathResultado
              .substring(0, state.mathResultado.length - 2)));
    } else {
      emit(state.copyWith(
          mathResultado: state.mathResultado.length > 1
              ? state.mathResultado.substring(0, state.mathResultado.length - 1)
              : '0'));
    }
  } else if (state.valor2 != '') {
    if (state.valor2.endsWith('.0')) {
      emit(state.copyWith(
          valor2: state.valor2.substring(0, state.valor2.length - 2)));
    } else {
      emit(state.copyWith(
          valor2: state.valor2.length > 1
              ? state.valor2.substring(0, state.valor2.length - 1)
              : ''));
    }
  } else if (state.operacion != '') {
    emit(state.copyWith(
        operacion: state.operacion.length > 1
            ? state.operacion.replaceAll(state.operacion, '')
            : ''));
  } else {
    if (state.valor1.endsWith('.0')) {
      emit(state.copyWith(
          valor1: state.valor1.substring(0, state.valor2.length - 2)));
    } else {
      emit(state.copyWith(
          valor1: state.valor1.length > 1
              ? state.valor1.substring(0, state.valor1.length - 1)
              : '0'));
    }
  }
}

void _cambioSignoEvent(
    CalculadoraState state, CambioSigno event, Emitter<CalculadoraState> emit) {
  emit(state.copyWith(
      mathResultado: state.mathResultado.contains('-')
          ? state.mathResultado.replaceFirst('-', '')
          : '-' + state.mathResultado));
}

void _addNumeroEvent(state, AddNumero event, Emitter<CalculadoraState> emit) {
  emit(state.copyWith(
    mathResultado: (state.mathResultado == '0')
        ? event.numero
        : state.mathResultado + event.numero,
  ));
}
